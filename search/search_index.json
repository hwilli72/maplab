{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to maplab","text":"<p>A Python package for visualizing and manipulating geospatial data.</p> <ul> <li>Free software: MIT license</li> <li>Documentation: https://hwilli72.github.io/maplab</li> <li>GitHub: https://github.com/hwilli72/maplab </li> <li>PyPI: https://pypi.org/project/maplab/</li> <li>YouTube tutorial:https://www.youtube.com/watch?v=9N_v5G9j6LE</li> </ul>"},{"location":"#introduction","title":"Introduction","text":"<p>MapLab is a Python package for visualizing and manipulating geospatial data. It is built on top of ipyleaflet and folium, both of which are used for interactive mapping. MapLab provides a set of tools for creating interactive maps and preparing data for spatial analysis. It also provides a set of tools for adding geospatial data from the web to the interactive map. This package is designed for both beginners and advanced users. It is easy to use and can be applied to teaching and research purposes. I find a lot of the existing geospatial packages are very complicated in practice for beginners, and with this project I aimed to reach those who are not advanced in their GIS skills but simply want to display data with a spatial component on a map. MapLab has various functions that allow users to load shapefiles, basemaps, raster data, and other types of vector data onto an interactive map with minimal coding. Furthermore, MapLab includes functions that automate data cleaning operations that would otherwise be performed in excel to prepare geospatial data for mapping applications. I hope this package can fill the gap and make geospatial data analysis more accessible to a wider audience. </p>"},{"location":"#key-features","title":"Key Features","text":"<ul> <li>Create a map in a jupyter notebook with one line of code</li> <li>Load shapefiles, basemaps, raster data, and other types of vector data onto an interactive map</li> <li>Download geospatial data from the web</li> <li>Automate data cleaning operations that would otherwise be performed in excel to prepare geospatial data for mapping applications</li> <li>Create a split map with different layers on each side to compare change over time</li> <li>Add WMS National Land Cover Database layers to a map </li> </ul>"},{"location":"#credits","title":"Credits","text":"<p>This package was created with Cookiecutter and the giswqs/pypackage project template.</p>"},{"location":"changelog/","title":"Changelog","text":""},{"location":"changelog/#v022-apr-13-2023","title":"v0.2.2 - Apr 13, 2023","text":"<ul> <li>Added folium map class.</li> </ul>"},{"location":"changelog/#v021-apr-5-2023","title":"v0.2.1 - Apr 5, 2023","text":"<ul> <li>Added ipyleaflet map class.</li> </ul>"},{"location":"changelog/#v020-feb-23-2023","title":"v0.2.0 - Feb 23, 2023","text":"<ul> <li>Debug python</li> </ul>"},{"location":"changelog/#v010-feb-23-2023","title":"v0.1.0 - Feb 23, 2023","text":"<ul> <li>Created documentation website</li> </ul>"},{"location":"changelog/#v001-feb-23-2023","title":"v0.0.1 - Feb 23, 2023","text":"<ul> <li>Initial Release</li> </ul>"},{"location":"contributing/","title":"Contributing","text":"<p>Contributions are welcome, and they are greatly appreciated! Every little bit helps, and credit will always be given.</p> <p>You can contribute in many ways:</p>"},{"location":"contributing/#types-of-contributions","title":"Types of Contributions","text":""},{"location":"contributing/#report-bugs","title":"Report Bugs","text":"<p>Report bugs at https://github.com/hwilli72/maplab/issues.</p> <p>If you are reporting a bug, please include:</p> <ul> <li>Your operating system name and version.</li> <li>Any details about your local setup that might be helpful in troubleshooting.</li> <li>Detailed steps to reproduce the bug.</li> </ul>"},{"location":"contributing/#fix-bugs","title":"Fix Bugs","text":"<p>Look through the GitHub issues for bugs. Anything tagged with <code>bug</code> and <code>help wanted</code> is open to whoever wants to implement it.</p>"},{"location":"contributing/#implement-features","title":"Implement Features","text":"<p>Look through the GitHub issues for features. Anything tagged with <code>enhancement</code> and <code>help wanted</code> is open to whoever wants to implement it.</p>"},{"location":"contributing/#write-documentation","title":"Write Documentation","text":"<p>MapLab could always use more documentation, whether as part of the official MapLab docs, in docstrings, or even on the web in blog posts, articles, and such.</p>"},{"location":"contributing/#submit-feedback","title":"Submit Feedback","text":"<p>The best way to send feedback is to file an issue at https://github.com/hwilli72/maplab/issues.</p> <p>If you are proposing a feature:</p> <ul> <li>Explain in detail how it would work.</li> <li>Keep the scope as narrow as possible, to make it easier to implement.</li> <li>Remember that this is a volunteer-driven project, and that contributions are welcome :)</li> </ul>"},{"location":"contributing/#get-started","title":"Get Started!","text":"<p>Ready to contribute? Here's how to set up maplab for local development.</p> <ol> <li> <p>Fork the maplab repo on GitHub.</p> </li> <li> <p>Clone your fork locally:</p> <pre><code>$ git clone git@github.com:your_name_here/maplab.git\n</code></pre> </li> <li> <p>Install your local copy into a virtualenv. Assuming you have     virtualenvwrapper installed, this is how you set up your fork for     local development:</p> <pre><code>$ mkvirtualenv maplab\n$ cd maplab/\n$ python setup.py develop\n</code></pre> </li> <li> <p>Create a branch for local development:</p> <pre><code>$ git checkout -b name-of-your-bugfix-or-feature\n</code></pre> <p>Now you can make your changes locally.</p> </li> <li> <p>When you're done making changes, check that your changes pass flake8     and the tests, including testing other Python versions with tox:</p> <pre><code>$ flake8 maplab tests\n$ python setup.py test or pytest\n$ tox\n</code></pre> <p>To get flake8 and tox, just pip install them into your virtualenv.</p> </li> <li> <p>Commit your changes and push your branch to GitHub:</p> <pre><code>$ git add .\n$ git commit -m \"Your detailed description of your changes.\"\n$ git push origin name-of-your-bugfix-or-feature\n</code></pre> </li> <li> <p>Submit a pull request through the GitHub website.</p> </li> </ol>"},{"location":"contributing/#pull-request-guidelines","title":"Pull Request Guidelines","text":"<p>Before you submit a pull request, check that it meets these guidelines:</p> <ol> <li>The pull request should include tests.</li> <li>If the pull request adds functionality, the docs should be updated.     Put your new functionality into a function with a docstring, and add     the feature to the list in README.rst.</li> <li>The pull request should work for Python 3.5, 3.6, 3.7 and 3.8, and     for PyPy. Check https://github.com/hwilli72/maplab/pull_requests and make sure that the tests pass for all     supported Python versions.</li> </ol>"},{"location":"faq/","title":"FAQ","text":""},{"location":"foliumap/","title":"foliumap module","text":"<p>Foliumap module.</p>"},{"location":"foliumap/#maplab.foliumap.Map","title":"<code> Map            (Map)         </code>","text":"<p>A folium map with additional functionality.</p> <p>Parameters:</p> Name Type Description Default <code>center</code> <code>list</code> <p>The center of the map. Defaults to [20,0].</p> <code>[20, 0]</code> <code>zoom</code> <code>int</code> <p>The zoom level of the map. Defaults to 2.</p> <code>2</code> <code>**kwargs</code> <p>Keyword arguments passed to the folium map.</p> <code>{}</code> Source code in <code>maplab/foliumap.py</code> <pre><code>class Map(folium.Map):\n\n\"\"\"A folium map with additional functionality.\n    Args:\n        center (list, optional): The center of the map. Defaults to [20,0].\n        zoom (int, optional): The zoom level of the map. Defaults to 2.\n        **kwargs: Keyword arguments passed to the folium map.\n    \"\"\"\n\n    def __init__(self, center=[20,0], zoom=2, **kwargs) -&gt; None:\n\"\"\"Adds the ability to use a mouse to zoom in and out.\n\n        Args:\n            **kwargs: Keyword arguments passed to the scroll wheel zoom.\n        \"\"\"\n        if \"scroll_wheel_zoom\" not in kwargs:\n            kwargs[\"scroll_wheel_zoom\"] = True\n\n        super().__init__(location=center, zoom_start=zoom, **kwargs)\n\n# Add Tile Layer Function\n    def add_tile_layer(self, url, name, attribution=\"\", **kwargs):\n\"\"\"Add a tile layer to the map.\n        Args:\n            url (str): The url of the tile layer.\n            name (str): The name of the tile layer.\n            attribution (str, optional): The attribution of the tile layer. Defaults to \"\".\n        \"\"\"\n        tile_layer = folium.TileLayer(\n            tiles=url, \n            name=name, \n            attr=attribution,\n            **kwargs\n        )\n        self.add_child(tile_layer)\n\n# Add basemap function\n    def add_basemap(self, name, **kwargs):\n\"\"\"Add a basemap from folium to the map.\n        Args:\n            name (str): The name of the basemap.\n        \"\"\"\n        basemap = folium.basemaps[name](**kwargs)\n        self.add_child(basemap)\n\n# Add shapefile function\n    def add_shapefile(self, path, name, **kwargs):\n\"\"\"Add a shapefile to the map.\n        Args:\n            path (str): The path to the shapefile.\n            name (str): The name of the shapefile.\n        \"\"\"\n        shapefile = folium.features.GeoJson(\n            data=path,\n            name=name,\n            **kwargs\n        )\n        self.add_child(shapefile)\n\n# Add GeoJSON function\n    def add_geojson(self, path, name, **kwargs):\n\"\"\"Add a GeoJSON file to the map.\n        Args:\n            path (str): The path to the GeoJSON file.\n            name (str): The name of the GeoJSON file.\n        \"\"\"\n        geojson = folium.features.GeoJson(\n            data=path,\n            name=name,\n            **kwargs\n        )\n        self.add_child(geojson)\n</code></pre>"},{"location":"foliumap/#maplab.foliumap.Map.__init__","title":"<code>__init__(self, center=[20, 0], zoom=2, **kwargs)</code>  <code>special</code>","text":"<p>Adds the ability to use a mouse to zoom in and out.</p> <p>Parameters:</p> Name Type Description Default <code>**kwargs</code> <p>Keyword arguments passed to the scroll wheel zoom.</p> <code>{}</code> Source code in <code>maplab/foliumap.py</code> <pre><code>def __init__(self, center=[20,0], zoom=2, **kwargs) -&gt; None:\n\"\"\"Adds the ability to use a mouse to zoom in and out.\n\n    Args:\n        **kwargs: Keyword arguments passed to the scroll wheel zoom.\n    \"\"\"\n    if \"scroll_wheel_zoom\" not in kwargs:\n        kwargs[\"scroll_wheel_zoom\"] = True\n\n    super().__init__(location=center, zoom_start=zoom, **kwargs)\n</code></pre>"},{"location":"foliumap/#maplab.foliumap.Map.add_basemap","title":"<code>add_basemap(self, name, **kwargs)</code>","text":"<p>Add a basemap from folium to the map.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>The name of the basemap.</p> required Source code in <code>maplab/foliumap.py</code> <pre><code>def add_basemap(self, name, **kwargs):\n\"\"\"Add a basemap from folium to the map.\n    Args:\n        name (str): The name of the basemap.\n    \"\"\"\n    basemap = folium.basemaps[name](**kwargs)\n    self.add_child(basemap)\n</code></pre>"},{"location":"foliumap/#maplab.foliumap.Map.add_geojson","title":"<code>add_geojson(self, path, name, **kwargs)</code>","text":"<p>Add a GeoJSON file to the map.</p> <p>Parameters:</p> Name Type Description Default <code>path</code> <code>str</code> <p>The path to the GeoJSON file.</p> required <code>name</code> <code>str</code> <p>The name of the GeoJSON file.</p> required Source code in <code>maplab/foliumap.py</code> <pre><code>def add_geojson(self, path, name, **kwargs):\n\"\"\"Add a GeoJSON file to the map.\n    Args:\n        path (str): The path to the GeoJSON file.\n        name (str): The name of the GeoJSON file.\n    \"\"\"\n    geojson = folium.features.GeoJson(\n        data=path,\n        name=name,\n        **kwargs\n    )\n    self.add_child(geojson)\n</code></pre>"},{"location":"foliumap/#maplab.foliumap.Map.add_shapefile","title":"<code>add_shapefile(self, path, name, **kwargs)</code>","text":"<p>Add a shapefile to the map.</p> <p>Parameters:</p> Name Type Description Default <code>path</code> <code>str</code> <p>The path to the shapefile.</p> required <code>name</code> <code>str</code> <p>The name of the shapefile.</p> required Source code in <code>maplab/foliumap.py</code> <pre><code>def add_shapefile(self, path, name, **kwargs):\n\"\"\"Add a shapefile to the map.\n    Args:\n        path (str): The path to the shapefile.\n        name (str): The name of the shapefile.\n    \"\"\"\n    shapefile = folium.features.GeoJson(\n        data=path,\n        name=name,\n        **kwargs\n    )\n    self.add_child(shapefile)\n</code></pre>"},{"location":"foliumap/#maplab.foliumap.Map.add_tile_layer","title":"<code>add_tile_layer(self, url, name, attribution='', **kwargs)</code>","text":"<p>Add a tile layer to the map.</p> <p>Parameters:</p> Name Type Description Default <code>url</code> <code>str</code> <p>The url of the tile layer.</p> required <code>name</code> <code>str</code> <p>The name of the tile layer.</p> required <code>attribution</code> <code>str</code> <p>The attribution of the tile layer. Defaults to \"\".</p> <code>''</code> Source code in <code>maplab/foliumap.py</code> <pre><code>def add_tile_layer(self, url, name, attribution=\"\", **kwargs):\n\"\"\"Add a tile layer to the map.\n    Args:\n        url (str): The url of the tile layer.\n        name (str): The name of the tile layer.\n        attribution (str, optional): The attribution of the tile layer. Defaults to \"\".\n    \"\"\"\n    tile_layer = folium.TileLayer(\n        tiles=url, \n        name=name, \n        attr=attribution,\n        **kwargs\n    )\n    self.add_child(tile_layer)\n</code></pre>"},{"location":"installation/","title":"Installation","text":""},{"location":"installation/#stable-release","title":"Stable release","text":"<p>To install MapLab, run this command in your terminal:</p> <pre><code>pip install maplab\n</code></pre> <p>This is the preferred method to install MapLab, as it will always install the most recent stable release.</p> <p>If you don't have pip installed, this Python installation guide can guide you through the process.</p>"},{"location":"installation/#from-sources","title":"From sources","text":"<p>The sources for MapLab can be downloaded from the Github repo.</p> <p>You can clone the public repository:</p> <pre><code>git clone git://github.com/hwilli72/maplab\n</code></pre>"},{"location":"installation/#install-from-github","title":"Install from GitHub","text":"<p>To install the development version from GitHub using Git, run this command in your terminal:</p> <pre><code>pip install git+https://github.com/hwilli72/maplab\n</code></pre>"},{"location":"installation/#install-from-anaconda","title":"Install from Anaconda","text":"<p>To install MabLab from Anaconda, run this command in your terminal:</p> <pre><code>conda install -c conda-forge maplab\n</code></pre>"},{"location":"installation/#upgrade-maplab","title":"Upgrade MapLab","text":"<p>To upgrade MapLab to the latest version, run this command in your terminal:</p> <p><pre><code>pip install -U maplab\n</code></pre> Using conda, you can update MapLab using the following command:</p> <pre><code>conda update -c conda-forge maplab\n</code></pre>"},{"location":"maplab/","title":"maplab module","text":"<p>Main module.</p>"},{"location":"maplab/#maplab.maplab.Map","title":"<code> Map            (Map)         </code>","text":"<p>A class to create a map with ipyleaflet.</p> <p>Parameters:</p> Name Type Description Default <code>center</code> <code>list</code> <p>The center of the map. Defaults to [20, 0].</p> <code>[20, 0]</code> <code>zoom</code> <code>int</code> <p>The zoom level of the map. Defaults to 2.</p> <code>2</code> <code>kwargs</code> <p>Keyword arguments to pass to the map.</p> <code>{}</code> Source code in <code>maplab/maplab.py</code> <pre><code>class Map(ipyleaflet.Map):\n\n\"\"\"A class to create a map with ipyleaflet.\n    Args:\n        center (list, optional): The center of the map. Defaults to [20, 0].\n        zoom (int, optional): The zoom level of the map. Defaults to 2.\n        kwargs: Keyword arguments to pass to the map.\n    \"\"\"\n\n    def __init__(self, center=[20, 0], zoom=2, **kwargs) -&gt; None:\n\n        if \"scroll_wheel_zoom\" not in kwargs:\n            kwargs[\"scroll_wheel_zoom\"] = True\n\n        super().__init__(center=center, zoom=zoom, **kwargs)\n\n        if \"layers_control\" not in kwargs:\n            kwargs[\"layers_control\"] = True\n\n        if kwargs[\"layers_control\"]:\n            self.add_layers_control()\n\n        if \"fullscreen_control\" not in kwargs:\n            kwargs[\"fullscreen_control\"] = True\n\n        if kwargs[\"fullscreen_control\"]:\n            self.add_fullscreen_control()\n\n    def add_search_control(self, position=\"topleft\", **kwargs):\n\"\"\"Adds a search control to the map.\n\n        Args:\n            self: The map.\n            position (str, optional): The position of the search control. Defaults to \"topleft\".\n            kwargs: Keyword arguments to pass to the search control.\n\n        Returns:\n            ipyleaflet.SearchControl: The search control.\n        \"\"\"\n        if \"url\" not in kwargs:\n            kwargs[\"url\"] = 'https://nominatim.openstreetmap.org/search?format=json&amp;q={s}'\n\n\n        search_control = ipyleaflet.SearchControl(position=position, **kwargs)\n        self.add_control(search_control)\n\n    def add_draw_control(self, **kwargs):\n\"\"\"Adds a draw control to the map.\n\n        Args:\n            self: The map.\n            kwargs: Keyword arguments to pass to the draw control.\n\n        Returns:\n            ipyleaflet.DrawControl: The draw control.\n        \"\"\"\n        draw_control = ipyleaflet.DrawControl(**kwargs)\n\n        draw_control.polyline =  {\n            \"shapeOptions\": {\n                \"color\": \"#6bc2e5\",\n                \"weight\": 8,\n                \"opacity\": 1.0\n            }\n        }\n        draw_control.polygon = {\n            \"shapeOptions\": {\n                \"fillColor\": \"#6be5c3\",\n                \"color\": \"#6be5c3\",\n                \"fillOpacity\": 1.0\n            },\n            \"drawError\": {\n                \"color\": \"#dd253b\",\n                \"message\": \"Oops!\"\n            },\n            \"allowIntersection\": False\n        }\n        draw_control.circle = {\n            \"shapeOptions\": {\n                \"fillColor\": \"#efed69\",\n                \"color\": \"#efed69\",\n                \"fillOpacity\": 1.0\n            }\n        }\n        draw_control.rectangle = {\n            \"shapeOptions\": {\n                \"fillColor\": \"#fca45d\",\n                \"color\": \"#fca45d\",\n                \"fillOpacity\": 1.0\n            }\n        }\n\n        self.add_control(draw_control)\n\n    def add_layers_control(self, position=\"topright\"):\n\"\"\"Adds a layers control to the map.\n\n        Args:\n            self: The map.\n            position (str, optional): The position of the layers control. Defaults to \"topright\".\n\n        Returns:\n            ipyleaflet.LayersControl: The layers control.\n        \"\"\"\n        layers_control = ipyleaflet.LayersControl(position=position)\n        self.add_control(layers_control)\n\n    def add_fullscreen_control(self, position=\"topleft\"):\n\"\"\"Adds a fullscreen control to the map.\n\n        Args:\n            self: The map.\n            position (str, optional): The position of the fullscreen control. Defaults to \"topleft\".\n\n        Returns:\n            ipyleaflet.FullScreenControl: The fullscreen control.\n        \"\"\"\n        fullscreen_control = ipyleaflet.FullScreenControl(position=position)\n        self.add_control(fullscreen_control)\n\n    def add_tile_layer(self, url, name, attribution=\"\", **kwargs):\n\"\"\"Adds a tile layer to the map.\n\n        Args:\n            self: The map.\n            url (str): The URL template of the tile layer.\n            attribution (str): The attribution of the tile layer.\n            name (str, optional): The name of the tile layer. Defaults to \"OpenStreetMap\".\n            kwargs: Keyword arguments to pass to the tile layer.\n\n        Returns:\n            ipyleaflet.TileLayer: The tile layer.\n        \"\"\"\n        tile_layer = ipyleaflet.TileLayer(url=url, attribution=attribution, name=name, **kwargs)\n        self.add_layer(tile_layer)\n\n    def add_basemap(self, basemap, **kwargs):\n\"\"\"Adds a basemap to the map.\n        Args:\n            self: The map.\n            basemap (str): The basemap to add.\n            kwargs: Keyword arguments to pass to the basemap.\n        \"\"\"\n        import xyzservices.providers as xyz\n\n        if basemap.lower() == \"roadmap\":\n            url = 'http://mt0.google.com/vt/lyrs=m&amp;hl=en&amp;x={x}&amp;y={y}&amp;z={z}'\n            self.add_tile_layer(url, name=basemap, **kwargs)\n        elif basemap.lower() == \"satellite\":\n            url = 'http://mt0.google.com/vt/lyrs=y&amp;hl=en&amp;x={x}&amp;y={y}&amp;z={z}'\n            self.add_tile_layer(url, name=basemap, **kwargs)\n        elif basemap.lower() == \"terrain_only\":\n            url = 'http://mt0.google.com/vt/lyrs=t&amp;hl=en&amp;x={x}&amp;y={y}&amp;z={z}'\n            self.add_tile_layer(url, name=basemap, **kwargs)\n        elif basemap.lower() == \"terrain\":\n            url = 'http://mt0.google.com/vt/lyrs=p&amp;hl=en&amp;x={x}&amp;y={y}&amp;z={z}'\n            self.add_tile_layer(url, name=basemap, **kwargs)\n        else:\n            try:\n                basemap = eval(f\"xyz.{basemap}\")\n                url = basemap.build_url()\n                attribution = basemap.attribution\n                self.add_tile_layer(url, name=basemap.name, attribution=attribution, **kwargs)\n            except:\n                raise ValueError(f\"Basemap '{basemap}' not found.\")\n\n    def add_geojson(self, data, **kwargs):\n\"\"\"Adds a GeoJSON layer to the map.\n        Args:\n            self: The map.\n            data (dict): The GeoJSON data.\n            kwargs: Keyword arguments to pass to the GeoJSON layer.\n\n        Returns:\n            ipyleaflet.GeoJSON: The GeoJSON layer.\n        \"\"\"\n        import json\n\n        if isinstance(data, str):\n            with open(data, \"r\") as f:\n                data = json.load(f)\n\n        geojson = ipyleaflet.GeoJSON(data=data, **kwargs)\n        self.add_layer(geojson)\n\n    def add_shp(self, data, name='Shapefile', **kwargs):\n\"\"\"Adds a shapefile to the map.\n\n        Args:\n            self: The map.\n            data: The shapefile data.\n            name (str, optional): The name of the shapefile layer. Defaults to \"Shapefile\".\n            kwargs: Keyword arguments to pass to the shapefile layer.\n\n        Returns:\n            gdf.__geo_interface__: The shapefile layer.\n        \"\"\"\n        import geopandas as gpd\n\n        gdf = gpd.read_file(data)\n        geojson = gdf.__geo_interface__\n        self.add_geojson(geojson, name=name, **kwargs)\n\n    def add_gdf(self, gdf, name='GeoDataFrame', **kwargs):\n\"\"\"Adds a geopandas GeoDataFrame to the map.\n\n        Args:\n            self: The map.\n            gdf: The geopandas GeoDataFrame.\n            name (str, optional): The name of the GeoDataFrame layer. Defaults to \"GeoDataFrame\".\n            kwargs: Keyword arguments to pass to the GeoDataFrame layer.\n\n        Returns:\n            gdf.__geo_interface__: The GeoDataFrame layer.\n        \"\"\"\n        geojson = gdf.__geo_interface__\n        self.add_geojson(geojson, name=name, **kwargs)\n\n    def add_vector(self, data, name='Vector', **kwargs):\n\"\"\" Adds any geopandas supported vector data to the map.\n        Args:\n            self: The map.\n            data: The vector data.\n            name (str, optional): The name of the vector layer. Defaults to \"Vector\".\n            kwargs: Keyword arguments to pass to the vector layer.\"\"\"\n        import geopandas as gpd\n        if data.endswith(\".shp\"):\n            self.add_shp(data, name=name, **kwargs)\n        if data.endswith(\".geojson\"):\n            self.add_geojson(data, name=name, **kwargs)\n        else:\n            gdf = gpd.read_file(data) \n            self.add_gdf(gdf, name=name, **kwargs)\n\n    def add_raster(self, url, name='Raster', fit_bounds=True, **kwargs):\n\"\"\"Adds a raster layer to the map.\n\n        Args:\n            self: The map.\n            url (str): The URL to the raster.\n            name (str, optional): The name of the raster layer. Defaults to \"Raster\".\n            fit_bounds (bool, optional): Whether to fit the bounds of the map to the raster. Defaults to True.\n            kwargs: Keyword arguments to pass to the raster layer.\n\n        Returns:\n            ipyleaflet.RasterLayer: The raster layer.\n        \"\"\"\n        import httpx\n\n        titiler_endpoint = \"https://titiler.xyz\"\n\n        r = httpx.get(\n            f\"{titiler_endpoint}/cog/info\",\n            params = {\n                \"url\": url,\n            }\n        ).json()\n\n        bounds = r[\"bounds\"]\n\n        r = httpx.get(\n            f\"{titiler_endpoint}/cog/tilejson.json\",\n            params = {\n                \"url\": url,\n            }\n        ).json()\n\n        tile = r[\"tiles\"][0]\n\n        self.add_tile_layer(url=tile, name=name, **kwargs)\n\n        if fit_bounds:\n            bbox = [[bounds[0], bounds[1]], [bounds[2], bounds[3]]]\n            self.fit_bounds(bbox)\n\n\n    def add_image(self, path, w=250, h=250):\n\"\"\"Adds a small image (like your logo) to the bottom right of the map\n        Args:\n        file (str): the filepath of the image\n        w (int) : width of the image (defaults 250 px)\n        h (int) : height of the image (defaults 250 px)\n        \"\"\"\n        import ipywidgets as widgets\n\n        file = open(path, \"rb\")\n        image = file.read()\n        i = widgets.Image(\n            value=image,\n            format='png',\n            width=w,\n            height=h,\n        )\n\n        output_widget = widgets.Output()\n        output_control = ipyleaflet.WidgetControl(widget=output_widget, position='bottomright')\n        self.add_control(output_control)\n        with output_widget:\n            self.add_control(ipyleaflet.WidgetControl(widget=i, position='bottomright'))\n\n    def add_toolbar(self, position=\"topright\"):\n\"\"\"Adds a dropdown widget to select a basemap.\n        Args:\n            self: The map.\n            position (str, optional): The position of the toolbar. Defaults to \"topright\".\n        \"\"\"\n        import ipywidgets as widgets\n\n        widget_width = \"250px\"\n        padding = \"0px 0px 0px 5px\"  # upper, right, bottom, left\n\n        toolbar_button = widgets.ToggleButton(\n            value=False,\n            tooltip=\"Toolbar\",\n            icon=\"wrench\",\n            layout=widgets.Layout(width=\"28px\", height=\"28px\", padding=padding),\n        )\n\n        close_button = widgets.ToggleButton(\n            value=False,\n            tooltip=\"Close the tool\",\n            icon=\"times\",\n            button_style=\"primary\",\n            layout=widgets.Layout(height=\"28px\", width=\"28px\", padding=padding),\n        )\n\n        toolbar = widgets.HBox([toolbar_button, close_button])\n\n        def close_click(change):\n            if change[\"new\"]:\n                toolbar_button.close()\n                close_button.close()\n                toolbar.close()\n                basemap.close()\n\n        close_button.observe(close_click, \"value\")\n\n        rows = 2\n        cols = 2\n        grid = widgets.GridspecLayout(rows, cols, grid_gap=\"0px\", layout=widgets.Layout(width=\"65px\"))\n\n        icons = [\"folder-open\", \"map\", \"bluetooth\", \"area-chart\"]\n\n        for i in range(rows):\n            for j in range(cols):\n                grid[i, j] = widgets.Button(description=\"\", button_style=\"primary\", icon=icons[i*rows+j], \n                                            layout=widgets.Layout(width=\"28px\", padding=\"0px\"))\n\n        toolbar = widgets.VBox([toolbar_button])\n\n### Basemap info\n\n        basemap = widgets.Dropdown(\n            options=['OpenStreetMap', 'ROADMAP', 'SATELLITE','TERRAIN','TERRAIN WITH LABELS'],\n            value=None,\n            description='Basemap:',\n            style={'description_width': 'initial'},\n            layout=widgets.Layout(width='250px')\n        )\n\n        basemap_ctrl = ipyleaflet.WidgetControl(widget=basemap, position='topright')\n\n        def change_basemap(change):\n            if change['new']:\n                self.add_basemap(basemap.value)\n\n        basemap.observe(change_basemap, names='value')\n\n### Marker info\n        import ipyfilechooser\n\n        marker = ipyfilechooser.FileChooser('/Users/')\n\n        marker_ctrl = ipyleaflet.WidgetControl(widget=marker, position='topright')\n\n        def change_marker(change):\n            if change['new']:\n                self.add_points_from_csv(marker.selected)\n\n        marker.observe(change_marker, names='selected')\n\n### Dropdown\n\n        output = widgets.Output()\n        output_ctrl = ipyleaflet.WidgetControl(widget=output, position=\"bottomright\")\n        self.add_control(output_ctrl)\n\n        def tool_click(b):\n            with output:\n                output.clear_output()\n                print(f\"You clicked the {b.icon} button.\")\n                if b.icon == 'map':\n                    if basemap_ctrl not in self.controls:\n                        self.add_control(basemap_ctrl)\n                if b.icon == 'folder-open':\n                    if marker_ctrl not in self.controls:\n                        self.add_control(marker_ctrl)\n                    elif basemap_ctrl in self.controls:\n                        self.remove_control(basemap_ctrl)\n\n        for i in range(rows):\n            for j in range(cols):\n                tool = grid[i, j]\n                tool.on_click(tool_click)\n\n        def toolbar_click(change):\n            if change[\"new\"]:\n                toolbar.children = [widgets.HBox([close_button, toolbar_button]), grid]\n            else:\n                toolbar.children = [toolbar_button]\n\n        toolbar_button.observe(toolbar_click, \"value\")\n\n        toolbar_ctrl = ipyleaflet.WidgetControl(widget=toolbar, position=position)\n\n        self.add_control(toolbar_ctrl)\n\n    def add_wms_layer(self, url, name, layers, format='image/png', transparent=True, attribution='', **kwargs):\n\"\"\"Adds a WMS layer to the map.\n        Args:\n            url (str): The URL of the WMS service.\n            name (str): The name of the layer.\n            layers (str): The layers of the WMS service.\n            format (str, optional): The format of the image. Defaults to 'image/png'.\n            transparent (bool, optional): Whether the image is transparent. Defaults to True.\n            attribution (str, optional): The attribution of the data. Defaults to ''.\n        \"\"\"\n        import ipyleaflet\n        import requests\n        from ipyleaflet import WMSLayer\n\n        wms = ipyleaflet.WMSLayer(\n            url=url,\n            layers=layers,\n            format=format,\n            transparent=transparent,\n            attribution=attribution,\n            name=name, **kwargs\n        )\n        self.add_layer(wms)\n\n    def add_landcover(self, NLCD, **kwargs):\n\"\"\"Adds the NLCD to the map.\n\n        Args:\n            self: The map.\n            NLCD (str): The NLCD to add.\n            kwargs: Keyword arguments to pass to the NLCD.\n        \"\"\"\n        if NLCD.lower() == \"2001 land cover\":\n            url = 'https://www.mrlc.gov/geoserver/mrlc_display/NLCD_2001_Land_Cover_L48/wms?'\n            layers = 'NLCD_2001_Land_Cover'\n            self.add_wms_layer(url, layers=layers, name=NLCD, **kwargs)\n        elif NLCD.lower() == \"2004 land cover\":\n            url = 'https://www.mrlc.gov/geoserver/mrlc_display/NLCD_2004_Land_Cover_L48/wms?'\n            layers = 'NLCD_2004_Land_Cover'\n            self.add_wms_layer(url, layers=layers, name=NLCD, **kwargs)\n        elif NLCD.lower() == \"2006 land cover\":\n            url = 'https://www.mrlc.gov/geoserver/mrlc_display/NLCD_2006_Land_Cover_L48/wms?'\n            layers = 'NLCD_2006_Land_Cover'\n            self.add_wms_layer(url, layers=layers, name=NLCD, **kwargs)\n        elif NLCD.lower() == \"2008 land cover\":\n            url = 'https://www.mrlc.gov/geoserver/mrlc_display/NLCD_2008_Land_Cover_L48/wms?'\n            layers = 'NLCD_2008_Land_Cover'\n            self.add_wms_layer(url, layers=layers, name=NLCD, **kwargs)\n        elif NLCD.lower() == \"2019 land cover\":\n            url = 'https://www.mrlc.gov/geoserver/mrlc_display/NLCD_2019_Land_Cover_L48/wms?'\n            layers = 'NLCD_2019_Land_Cover_L48'\n            self.add_wms_layer(url, layers=layers, name=NLCD, **kwargs)\n        else:\n            print(\"Please enter a valid NLCD layer name.\")\n\n\n    def add_swipe_control(self, layer1_url, layer2_url, swipe_position):\n'''Adds a swipe control to the map.\n        Args:\n            layer1_url (str): The URL of the first tile layer to swipe between.\n            layer2_url (str): The URL of the second tile layer to swipe between.\n            swipe_position (str): The position of the swipe control. Valid values are 'bottomleft', 'bottomright', 'topleft', and 'topright'.'''\t        \n        # Create the two layers to swipe between\n        layer1 = ipyleaflet.TileLayer(url=layer1_url, name=\"Layer 1\")\n        layer2 = ipyleaflet.TileLayer(url=layer2_url, name=\"Layer 2\")\n\n        # Create a layer group to hold the two layers\n        layer_group = ipyleaflet.LayerGroup(layers=(layer1, layer2))\n\n        # Add the layer group to the map\n        self.add_layer(layer_group)\n\n        # Create the swipe control and add it to the map\n        swipe_control = ipyleaflet.SplitMapControl(left_layer=layer1, right_layer=layer2, position=swipe_position)\n        self.add_control(swipe_control)\n\n        # make the swipe control draggable\n        def on_mouse_down(event):\n            swipe_control.dragging = True\n            swipe_control.start_x = event['containerPoint'][0]\n\n        def on_mouse_move(event):\n            if swipe_control.dragging:\n                delta = event['containerPoint'][0] - swipe_control.start_x\n                swipe_control.split_position += delta / self.width * 100\n                swipe_control.start_x = event['containerPoint'][0]\n\n        def on_mouse_up(event):\n            swipe_control.dragging = False\n\n        self.on_interaction(on_mouse_down, 'mousedown')\n        self.on_interaction(on_mouse_move, 'mousemove')\n        self.on_interaction(on_mouse_up, 'mouseup')\n\n        print(\"Swipe tool added to map\")\n\n    def csv_to_shp(in_csv, out_shp, x='longitude', y='latitude'):\n'''Converts a csv file to a shapefile.\n        Args:\n            in_csv (str): The input csv file.\n            out_shp (str): The output shapefile.\n            x (str, optional): The name of the x column. Defaults to 'longitude'.\n            y (str, optional): The name of the y column. Defaults to 'latitude'.'''\n        import pandas as pd\n        import geopandas as gpd\n        from shapely.geometry import Point\n        df = pd.read_csv(in_csv)\n        gdf = gpd.GeoDataFrame(df, geometry=gpd.points_from_xy(df[x], df[y]))\n        gdf.to_file(out_shp)\n        print(\"Shapefile saved to \" + out_shp)\n\n    def csv_to_geojson(in_csv, out_geojson, x='longitude', y='latitude'):\n'''Converts a csv file to a geojson file.\n        Args:\n            in_csv (str): The input csv file.\n            out_geojson (str): The output geojson file.\n            x (str, optional): The name of the x column. Defaults to 'longitude'.\n            y (str, optional): The name of the y column. Defaults to 'latitude'.'''\n        import pandas as pd\n        import geopandas as gpd\n        from shapely.geometry import Point\n        df = pd.read_csv(in_csv)\n        gdf = gpd.GeoDataFrame(df, geometry=gpd.points_from_xy(df[x], df[y]))\n        gdf.to_file(out_geojson, driver='GeoJSON')\n        print(\"GeoJSON saved to \" + out_geojson)\n\n    def csv_to_markercluster(self, in_csv, x='longitude', y='latitude'):\n'''Converts a csv file to a marker cluster layer and adds it to the map.\n        Args:\n            in_csv (str): The input csv file.\n            x (str, optional): The name of the x column. Defaults to 'longitude'.\n            y (str, optional): The name of the y column. Defaults to 'latitude'.'''\n        import pandas as pd\n        import geopandas as gpd\n        from shapely.geometry import Point\n        from ipyleaflet import MarkerCluster\n        df = pd.read_csv(in_csv)\n        gdf = gpd.GeoDataFrame(df, geometry=gpd.points_from_xy(df[x], df[y]))\n        marker_cluster = MarkerCluster(markers=[ipyleaflet.Marker(location=[point.y, point.x]) for point in gdf['geometry'].tolist()])\n        self.add_layer(marker_cluster)\n        print(\"Marker cluster added to map\")\n</code></pre>"},{"location":"maplab/#maplab.maplab.Map.add_basemap","title":"<code>add_basemap(self, basemap, **kwargs)</code>","text":"<p>Adds a basemap to the map.</p> <p>Parameters:</p> Name Type Description Default <code>self</code> <p>The map.</p> required <code>basemap</code> <code>str</code> <p>The basemap to add.</p> required <code>kwargs</code> <p>Keyword arguments to pass to the basemap.</p> <code>{}</code> Source code in <code>maplab/maplab.py</code> <pre><code>def add_basemap(self, basemap, **kwargs):\n\"\"\"Adds a basemap to the map.\n    Args:\n        self: The map.\n        basemap (str): The basemap to add.\n        kwargs: Keyword arguments to pass to the basemap.\n    \"\"\"\n    import xyzservices.providers as xyz\n\n    if basemap.lower() == \"roadmap\":\n        url = 'http://mt0.google.com/vt/lyrs=m&amp;hl=en&amp;x={x}&amp;y={y}&amp;z={z}'\n        self.add_tile_layer(url, name=basemap, **kwargs)\n    elif basemap.lower() == \"satellite\":\n        url = 'http://mt0.google.com/vt/lyrs=y&amp;hl=en&amp;x={x}&amp;y={y}&amp;z={z}'\n        self.add_tile_layer(url, name=basemap, **kwargs)\n    elif basemap.lower() == \"terrain_only\":\n        url = 'http://mt0.google.com/vt/lyrs=t&amp;hl=en&amp;x={x}&amp;y={y}&amp;z={z}'\n        self.add_tile_layer(url, name=basemap, **kwargs)\n    elif basemap.lower() == \"terrain\":\n        url = 'http://mt0.google.com/vt/lyrs=p&amp;hl=en&amp;x={x}&amp;y={y}&amp;z={z}'\n        self.add_tile_layer(url, name=basemap, **kwargs)\n    else:\n        try:\n            basemap = eval(f\"xyz.{basemap}\")\n            url = basemap.build_url()\n            attribution = basemap.attribution\n            self.add_tile_layer(url, name=basemap.name, attribution=attribution, **kwargs)\n        except:\n            raise ValueError(f\"Basemap '{basemap}' not found.\")\n</code></pre>"},{"location":"maplab/#maplab.maplab.Map.add_draw_control","title":"<code>add_draw_control(self, **kwargs)</code>","text":"<p>Adds a draw control to the map.</p> <p>Parameters:</p> Name Type Description Default <code>self</code> <p>The map.</p> required <code>kwargs</code> <p>Keyword arguments to pass to the draw control.</p> <code>{}</code> <p>Returns:</p> Type Description <code>ipyleaflet.DrawControl</code> <p>The draw control.</p> Source code in <code>maplab/maplab.py</code> <pre><code>def add_draw_control(self, **kwargs):\n\"\"\"Adds a draw control to the map.\n\n    Args:\n        self: The map.\n        kwargs: Keyword arguments to pass to the draw control.\n\n    Returns:\n        ipyleaflet.DrawControl: The draw control.\n    \"\"\"\n    draw_control = ipyleaflet.DrawControl(**kwargs)\n\n    draw_control.polyline =  {\n        \"shapeOptions\": {\n            \"color\": \"#6bc2e5\",\n            \"weight\": 8,\n            \"opacity\": 1.0\n        }\n    }\n    draw_control.polygon = {\n        \"shapeOptions\": {\n            \"fillColor\": \"#6be5c3\",\n            \"color\": \"#6be5c3\",\n            \"fillOpacity\": 1.0\n        },\n        \"drawError\": {\n            \"color\": \"#dd253b\",\n            \"message\": \"Oops!\"\n        },\n        \"allowIntersection\": False\n    }\n    draw_control.circle = {\n        \"shapeOptions\": {\n            \"fillColor\": \"#efed69\",\n            \"color\": \"#efed69\",\n            \"fillOpacity\": 1.0\n        }\n    }\n    draw_control.rectangle = {\n        \"shapeOptions\": {\n            \"fillColor\": \"#fca45d\",\n            \"color\": \"#fca45d\",\n            \"fillOpacity\": 1.0\n        }\n    }\n\n    self.add_control(draw_control)\n</code></pre>"},{"location":"maplab/#maplab.maplab.Map.add_fullscreen_control","title":"<code>add_fullscreen_control(self, position='topleft')</code>","text":"<p>Adds a fullscreen control to the map.</p> <p>Parameters:</p> Name Type Description Default <code>self</code> <p>The map.</p> required <code>position</code> <code>str</code> <p>The position of the fullscreen control. Defaults to \"topleft\".</p> <code>'topleft'</code> <p>Returns:</p> Type Description <code>ipyleaflet.FullScreenControl</code> <p>The fullscreen control.</p> Source code in <code>maplab/maplab.py</code> <pre><code>def add_fullscreen_control(self, position=\"topleft\"):\n\"\"\"Adds a fullscreen control to the map.\n\n    Args:\n        self: The map.\n        position (str, optional): The position of the fullscreen control. Defaults to \"topleft\".\n\n    Returns:\n        ipyleaflet.FullScreenControl: The fullscreen control.\n    \"\"\"\n    fullscreen_control = ipyleaflet.FullScreenControl(position=position)\n    self.add_control(fullscreen_control)\n</code></pre>"},{"location":"maplab/#maplab.maplab.Map.add_gdf","title":"<code>add_gdf(self, gdf, name='GeoDataFrame', **kwargs)</code>","text":"<p>Adds a geopandas GeoDataFrame to the map.</p> <p>Parameters:</p> Name Type Description Default <code>self</code> <p>The map.</p> required <code>gdf</code> <p>The geopandas GeoDataFrame.</p> required <code>name</code> <code>str</code> <p>The name of the GeoDataFrame layer. Defaults to \"GeoDataFrame\".</p> <code>'GeoDataFrame'</code> <code>kwargs</code> <p>Keyword arguments to pass to the GeoDataFrame layer.</p> <code>{}</code> <p>Returns:</p> Type Description <code>gdf.__geo_interface__</code> <p>The GeoDataFrame layer.</p> Source code in <code>maplab/maplab.py</code> <pre><code>def add_gdf(self, gdf, name='GeoDataFrame', **kwargs):\n\"\"\"Adds a geopandas GeoDataFrame to the map.\n\n    Args:\n        self: The map.\n        gdf: The geopandas GeoDataFrame.\n        name (str, optional): The name of the GeoDataFrame layer. Defaults to \"GeoDataFrame\".\n        kwargs: Keyword arguments to pass to the GeoDataFrame layer.\n\n    Returns:\n        gdf.__geo_interface__: The GeoDataFrame layer.\n    \"\"\"\n    geojson = gdf.__geo_interface__\n    self.add_geojson(geojson, name=name, **kwargs)\n</code></pre>"},{"location":"maplab/#maplab.maplab.Map.add_geojson","title":"<code>add_geojson(self, data, **kwargs)</code>","text":"<p>Adds a GeoJSON layer to the map.</p> <p>Parameters:</p> Name Type Description Default <code>self</code> <p>The map.</p> required <code>data</code> <code>dict</code> <p>The GeoJSON data.</p> required <code>kwargs</code> <p>Keyword arguments to pass to the GeoJSON layer.</p> <code>{}</code> <p>Returns:</p> Type Description <code>ipyleaflet.GeoJSON</code> <p>The GeoJSON layer.</p> Source code in <code>maplab/maplab.py</code> <pre><code>def add_geojson(self, data, **kwargs):\n\"\"\"Adds a GeoJSON layer to the map.\n    Args:\n        self: The map.\n        data (dict): The GeoJSON data.\n        kwargs: Keyword arguments to pass to the GeoJSON layer.\n\n    Returns:\n        ipyleaflet.GeoJSON: The GeoJSON layer.\n    \"\"\"\n    import json\n\n    if isinstance(data, str):\n        with open(data, \"r\") as f:\n            data = json.load(f)\n\n    geojson = ipyleaflet.GeoJSON(data=data, **kwargs)\n    self.add_layer(geojson)\n</code></pre>"},{"location":"maplab/#maplab.maplab.Map.add_image","title":"<code>add_image(self, path, w=250, h=250)</code>","text":"<p>Adds a small image (like your logo) to the bottom right of the map</p> <p>file (str): the filepath of the image w (int) : width of the image (defaults 250 px) h (int) : height of the image (defaults 250 px)</p> Source code in <code>maplab/maplab.py</code> <pre><code>def add_image(self, path, w=250, h=250):\n\"\"\"Adds a small image (like your logo) to the bottom right of the map\n    Args:\n    file (str): the filepath of the image\n    w (int) : width of the image (defaults 250 px)\n    h (int) : height of the image (defaults 250 px)\n    \"\"\"\n    import ipywidgets as widgets\n\n    file = open(path, \"rb\")\n    image = file.read()\n    i = widgets.Image(\n        value=image,\n        format='png',\n        width=w,\n        height=h,\n    )\n\n    output_widget = widgets.Output()\n    output_control = ipyleaflet.WidgetControl(widget=output_widget, position='bottomright')\n    self.add_control(output_control)\n    with output_widget:\n        self.add_control(ipyleaflet.WidgetControl(widget=i, position='bottomright'))\n</code></pre>"},{"location":"maplab/#maplab.maplab.Map.add_landcover","title":"<code>add_landcover(self, NLCD, **kwargs)</code>","text":"<p>Adds the NLCD to the map.</p> <p>Parameters:</p> Name Type Description Default <code>self</code> <p>The map.</p> required <code>NLCD</code> <code>str</code> <p>The NLCD to add.</p> required <code>kwargs</code> <p>Keyword arguments to pass to the NLCD.</p> <code>{}</code> Source code in <code>maplab/maplab.py</code> <pre><code>def add_landcover(self, NLCD, **kwargs):\n\"\"\"Adds the NLCD to the map.\n\n    Args:\n        self: The map.\n        NLCD (str): The NLCD to add.\n        kwargs: Keyword arguments to pass to the NLCD.\n    \"\"\"\n    if NLCD.lower() == \"2001 land cover\":\n        url = 'https://www.mrlc.gov/geoserver/mrlc_display/NLCD_2001_Land_Cover_L48/wms?'\n        layers = 'NLCD_2001_Land_Cover'\n        self.add_wms_layer(url, layers=layers, name=NLCD, **kwargs)\n    elif NLCD.lower() == \"2004 land cover\":\n        url = 'https://www.mrlc.gov/geoserver/mrlc_display/NLCD_2004_Land_Cover_L48/wms?'\n        layers = 'NLCD_2004_Land_Cover'\n        self.add_wms_layer(url, layers=layers, name=NLCD, **kwargs)\n    elif NLCD.lower() == \"2006 land cover\":\n        url = 'https://www.mrlc.gov/geoserver/mrlc_display/NLCD_2006_Land_Cover_L48/wms?'\n        layers = 'NLCD_2006_Land_Cover'\n        self.add_wms_layer(url, layers=layers, name=NLCD, **kwargs)\n    elif NLCD.lower() == \"2008 land cover\":\n        url = 'https://www.mrlc.gov/geoserver/mrlc_display/NLCD_2008_Land_Cover_L48/wms?'\n        layers = 'NLCD_2008_Land_Cover'\n        self.add_wms_layer(url, layers=layers, name=NLCD, **kwargs)\n    elif NLCD.lower() == \"2019 land cover\":\n        url = 'https://www.mrlc.gov/geoserver/mrlc_display/NLCD_2019_Land_Cover_L48/wms?'\n        layers = 'NLCD_2019_Land_Cover_L48'\n        self.add_wms_layer(url, layers=layers, name=NLCD, **kwargs)\n    else:\n        print(\"Please enter a valid NLCD layer name.\")\n</code></pre>"},{"location":"maplab/#maplab.maplab.Map.add_layers_control","title":"<code>add_layers_control(self, position='topright')</code>","text":"<p>Adds a layers control to the map.</p> <p>Parameters:</p> Name Type Description Default <code>self</code> <p>The map.</p> required <code>position</code> <code>str</code> <p>The position of the layers control. Defaults to \"topright\".</p> <code>'topright'</code> <p>Returns:</p> Type Description <code>ipyleaflet.LayersControl</code> <p>The layers control.</p> Source code in <code>maplab/maplab.py</code> <pre><code>def add_layers_control(self, position=\"topright\"):\n\"\"\"Adds a layers control to the map.\n\n    Args:\n        self: The map.\n        position (str, optional): The position of the layers control. Defaults to \"topright\".\n\n    Returns:\n        ipyleaflet.LayersControl: The layers control.\n    \"\"\"\n    layers_control = ipyleaflet.LayersControl(position=position)\n    self.add_control(layers_control)\n</code></pre>"},{"location":"maplab/#maplab.maplab.Map.add_raster","title":"<code>add_raster(self, url, name='Raster', fit_bounds=True, **kwargs)</code>","text":"<p>Adds a raster layer to the map.</p> <p>Parameters:</p> Name Type Description Default <code>self</code> <p>The map.</p> required <code>url</code> <code>str</code> <p>The URL to the raster.</p> required <code>name</code> <code>str</code> <p>The name of the raster layer. Defaults to \"Raster\".</p> <code>'Raster'</code> <code>fit_bounds</code> <code>bool</code> <p>Whether to fit the bounds of the map to the raster. Defaults to True.</p> <code>True</code> <code>kwargs</code> <p>Keyword arguments to pass to the raster layer.</p> <code>{}</code> <p>Returns:</p> Type Description <code>ipyleaflet.RasterLayer</code> <p>The raster layer.</p> Source code in <code>maplab/maplab.py</code> <pre><code>def add_raster(self, url, name='Raster', fit_bounds=True, **kwargs):\n\"\"\"Adds a raster layer to the map.\n\n    Args:\n        self: The map.\n        url (str): The URL to the raster.\n        name (str, optional): The name of the raster layer. Defaults to \"Raster\".\n        fit_bounds (bool, optional): Whether to fit the bounds of the map to the raster. Defaults to True.\n        kwargs: Keyword arguments to pass to the raster layer.\n\n    Returns:\n        ipyleaflet.RasterLayer: The raster layer.\n    \"\"\"\n    import httpx\n\n    titiler_endpoint = \"https://titiler.xyz\"\n\n    r = httpx.get(\n        f\"{titiler_endpoint}/cog/info\",\n        params = {\n            \"url\": url,\n        }\n    ).json()\n\n    bounds = r[\"bounds\"]\n\n    r = httpx.get(\n        f\"{titiler_endpoint}/cog/tilejson.json\",\n        params = {\n            \"url\": url,\n        }\n    ).json()\n\n    tile = r[\"tiles\"][0]\n\n    self.add_tile_layer(url=tile, name=name, **kwargs)\n\n    if fit_bounds:\n        bbox = [[bounds[0], bounds[1]], [bounds[2], bounds[3]]]\n        self.fit_bounds(bbox)\n</code></pre>"},{"location":"maplab/#maplab.maplab.Map.add_search_control","title":"<code>add_search_control(self, position='topleft', **kwargs)</code>","text":"<p>Adds a search control to the map.</p> <p>Parameters:</p> Name Type Description Default <code>self</code> <p>The map.</p> required <code>position</code> <code>str</code> <p>The position of the search control. Defaults to \"topleft\".</p> <code>'topleft'</code> <code>kwargs</code> <p>Keyword arguments to pass to the search control.</p> <code>{}</code> <p>Returns:</p> Type Description <code>ipyleaflet.SearchControl</code> <p>The search control.</p> Source code in <code>maplab/maplab.py</code> <pre><code>def add_search_control(self, position=\"topleft\", **kwargs):\n\"\"\"Adds a search control to the map.\n\n    Args:\n        self: The map.\n        position (str, optional): The position of the search control. Defaults to \"topleft\".\n        kwargs: Keyword arguments to pass to the search control.\n\n    Returns:\n        ipyleaflet.SearchControl: The search control.\n    \"\"\"\n    if \"url\" not in kwargs:\n        kwargs[\"url\"] = 'https://nominatim.openstreetmap.org/search?format=json&amp;q={s}'\n\n\n    search_control = ipyleaflet.SearchControl(position=position, **kwargs)\n    self.add_control(search_control)\n</code></pre>"},{"location":"maplab/#maplab.maplab.Map.add_shp","title":"<code>add_shp(self, data, name='Shapefile', **kwargs)</code>","text":"<p>Adds a shapefile to the map.</p> <p>Parameters:</p> Name Type Description Default <code>self</code> <p>The map.</p> required <code>data</code> <p>The shapefile data.</p> required <code>name</code> <code>str</code> <p>The name of the shapefile layer. Defaults to \"Shapefile\".</p> <code>'Shapefile'</code> <code>kwargs</code> <p>Keyword arguments to pass to the shapefile layer.</p> <code>{}</code> <p>Returns:</p> Type Description <code>gdf.__geo_interface__</code> <p>The shapefile layer.</p> Source code in <code>maplab/maplab.py</code> <pre><code>def add_shp(self, data, name='Shapefile', **kwargs):\n\"\"\"Adds a shapefile to the map.\n\n    Args:\n        self: The map.\n        data: The shapefile data.\n        name (str, optional): The name of the shapefile layer. Defaults to \"Shapefile\".\n        kwargs: Keyword arguments to pass to the shapefile layer.\n\n    Returns:\n        gdf.__geo_interface__: The shapefile layer.\n    \"\"\"\n    import geopandas as gpd\n\n    gdf = gpd.read_file(data)\n    geojson = gdf.__geo_interface__\n    self.add_geojson(geojson, name=name, **kwargs)\n</code></pre>"},{"location":"maplab/#maplab.maplab.Map.add_swipe_control","title":"<code>add_swipe_control(self, layer1_url, layer2_url, swipe_position)</code>","text":"<p>Adds a swipe control to the map.</p> <p>Parameters:</p> Name Type Description Default <code>layer1_url</code> <code>str</code> <p>The URL of the first tile layer to swipe between.</p> required <code>layer2_url</code> <code>str</code> <p>The URL of the second tile layer to swipe between.</p> required <code>swipe_position</code> <code>str</code> <p>The position of the swipe control. Valid values are 'bottomleft', 'bottomright', 'topleft', and 'topright'.</p> required Source code in <code>maplab/maplab.py</code> <pre><code>def add_swipe_control(self, layer1_url, layer2_url, swipe_position):\n'''Adds a swipe control to the map.\n    Args:\n        layer1_url (str): The URL of the first tile layer to swipe between.\n        layer2_url (str): The URL of the second tile layer to swipe between.\n        swipe_position (str): The position of the swipe control. Valid values are 'bottomleft', 'bottomright', 'topleft', and 'topright'.'''\t        \n    # Create the two layers to swipe between\n    layer1 = ipyleaflet.TileLayer(url=layer1_url, name=\"Layer 1\")\n    layer2 = ipyleaflet.TileLayer(url=layer2_url, name=\"Layer 2\")\n\n    # Create a layer group to hold the two layers\n    layer_group = ipyleaflet.LayerGroup(layers=(layer1, layer2))\n\n    # Add the layer group to the map\n    self.add_layer(layer_group)\n\n    # Create the swipe control and add it to the map\n    swipe_control = ipyleaflet.SplitMapControl(left_layer=layer1, right_layer=layer2, position=swipe_position)\n    self.add_control(swipe_control)\n\n    # make the swipe control draggable\n    def on_mouse_down(event):\n        swipe_control.dragging = True\n        swipe_control.start_x = event['containerPoint'][0]\n\n    def on_mouse_move(event):\n        if swipe_control.dragging:\n            delta = event['containerPoint'][0] - swipe_control.start_x\n            swipe_control.split_position += delta / self.width * 100\n            swipe_control.start_x = event['containerPoint'][0]\n\n    def on_mouse_up(event):\n        swipe_control.dragging = False\n\n    self.on_interaction(on_mouse_down, 'mousedown')\n    self.on_interaction(on_mouse_move, 'mousemove')\n    self.on_interaction(on_mouse_up, 'mouseup')\n\n    print(\"Swipe tool added to map\")\n</code></pre>"},{"location":"maplab/#maplab.maplab.Map.add_tile_layer","title":"<code>add_tile_layer(self, url, name, attribution='', **kwargs)</code>","text":"<p>Adds a tile layer to the map.</p> <p>Parameters:</p> Name Type Description Default <code>self</code> <p>The map.</p> required <code>url</code> <code>str</code> <p>The URL template of the tile layer.</p> required <code>attribution</code> <code>str</code> <p>The attribution of the tile layer.</p> <code>''</code> <code>name</code> <code>str</code> <p>The name of the tile layer. Defaults to \"OpenStreetMap\".</p> required <code>kwargs</code> <p>Keyword arguments to pass to the tile layer.</p> <code>{}</code> <p>Returns:</p> Type Description <code>ipyleaflet.TileLayer</code> <p>The tile layer.</p> Source code in <code>maplab/maplab.py</code> <pre><code>def add_tile_layer(self, url, name, attribution=\"\", **kwargs):\n\"\"\"Adds a tile layer to the map.\n\n    Args:\n        self: The map.\n        url (str): The URL template of the tile layer.\n        attribution (str): The attribution of the tile layer.\n        name (str, optional): The name of the tile layer. Defaults to \"OpenStreetMap\".\n        kwargs: Keyword arguments to pass to the tile layer.\n\n    Returns:\n        ipyleaflet.TileLayer: The tile layer.\n    \"\"\"\n    tile_layer = ipyleaflet.TileLayer(url=url, attribution=attribution, name=name, **kwargs)\n    self.add_layer(tile_layer)\n</code></pre>"},{"location":"maplab/#maplab.maplab.Map.add_toolbar","title":"<code>add_toolbar(self, position='topright')</code>","text":"<p>Adds a dropdown widget to select a basemap.</p> <p>Parameters:</p> Name Type Description Default <code>self</code> <p>The map.</p> required <code>position</code> <code>str</code> <p>The position of the toolbar. Defaults to \"topright\".</p> <code>'topright'</code> Source code in <code>maplab/maplab.py</code> <pre><code>    def add_toolbar(self, position=\"topright\"):\n\"\"\"Adds a dropdown widget to select a basemap.\n        Args:\n            self: The map.\n            position (str, optional): The position of the toolbar. Defaults to \"topright\".\n        \"\"\"\n        import ipywidgets as widgets\n\n        widget_width = \"250px\"\n        padding = \"0px 0px 0px 5px\"  # upper, right, bottom, left\n\n        toolbar_button = widgets.ToggleButton(\n            value=False,\n            tooltip=\"Toolbar\",\n            icon=\"wrench\",\n            layout=widgets.Layout(width=\"28px\", height=\"28px\", padding=padding),\n        )\n\n        close_button = widgets.ToggleButton(\n            value=False,\n            tooltip=\"Close the tool\",\n            icon=\"times\",\n            button_style=\"primary\",\n            layout=widgets.Layout(height=\"28px\", width=\"28px\", padding=padding),\n        )\n\n        toolbar = widgets.HBox([toolbar_button, close_button])\n\n        def close_click(change):\n            if change[\"new\"]:\n                toolbar_button.close()\n                close_button.close()\n                toolbar.close()\n                basemap.close()\n\n        close_button.observe(close_click, \"value\")\n\n        rows = 2\n        cols = 2\n        grid = widgets.GridspecLayout(rows, cols, grid_gap=\"0px\", layout=widgets.Layout(width=\"65px\"))\n\n        icons = [\"folder-open\", \"map\", \"bluetooth\", \"area-chart\"]\n\n        for i in range(rows):\n            for j in range(cols):\n                grid[i, j] = widgets.Button(description=\"\", button_style=\"primary\", icon=icons[i*rows+j], \n                                            layout=widgets.Layout(width=\"28px\", padding=\"0px\"))\n\n        toolbar = widgets.VBox([toolbar_button])\n\n### Basemap info\n\n        basemap = widgets.Dropdown(\n            options=['OpenStreetMap', 'ROADMAP', 'SATELLITE','TERRAIN','TERRAIN WITH LABELS'],\n            value=None,\n            description='Basemap:',\n            style={'description_width': 'initial'},\n            layout=widgets.Layout(width='250px')\n        )\n\n        basemap_ctrl = ipyleaflet.WidgetControl(widget=basemap, position='topright')\n\n        def change_basemap(change):\n            if change['new']:\n                self.add_basemap(basemap.value)\n\n        basemap.observe(change_basemap, names='value')\n\n### Marker info\n        import ipyfilechooser\n\n        marker = ipyfilechooser.FileChooser('/Users/')\n\n        marker_ctrl = ipyleaflet.WidgetControl(widget=marker, position='topright')\n\n        def change_marker(change):\n            if change['new']:\n                self.add_points_from_csv(marker.selected)\n\n        marker.observe(change_marker, names='selected')\n\n### Dropdown\n\n        output = widgets.Output()\n        output_ctrl = ipyleaflet.WidgetControl(widget=output, position=\"bottomright\")\n        self.add_control(output_ctrl)\n\n        def tool_click(b):\n            with output:\n                output.clear_output()\n                print(f\"You clicked the {b.icon} button.\")\n                if b.icon == 'map':\n                    if basemap_ctrl not in self.controls:\n                        self.add_control(basemap_ctrl)\n                if b.icon == 'folder-open':\n                    if marker_ctrl not in self.controls:\n                        self.add_control(marker_ctrl)\n                    elif basemap_ctrl in self.controls:\n                        self.remove_control(basemap_ctrl)\n\n        for i in range(rows):\n            for j in range(cols):\n                tool = grid[i, j]\n                tool.on_click(tool_click)\n\n        def toolbar_click(change):\n            if change[\"new\"]:\n                toolbar.children = [widgets.HBox([close_button, toolbar_button]), grid]\n            else:\n                toolbar.children = [toolbar_button]\n\n        toolbar_button.observe(toolbar_click, \"value\")\n\n        toolbar_ctrl = ipyleaflet.WidgetControl(widget=toolbar, position=position)\n\n        self.add_control(toolbar_ctrl)\n</code></pre>"},{"location":"maplab/#maplab.maplab.Map.add_vector","title":"<code>add_vector(self, data, name='Vector', **kwargs)</code>","text":"<p>Adds any geopandas supported vector data to the map.</p> <p>Parameters:</p> Name Type Description Default <code>self</code> <p>The map.</p> required <code>data</code> <p>The vector data.</p> required <code>name</code> <code>str</code> <p>The name of the vector layer. Defaults to \"Vector\".</p> <code>'Vector'</code> <code>kwargs</code> <p>Keyword arguments to pass to the vector layer.</p> <code>{}</code> Source code in <code>maplab/maplab.py</code> <pre><code>def add_vector(self, data, name='Vector', **kwargs):\n\"\"\" Adds any geopandas supported vector data to the map.\n    Args:\n        self: The map.\n        data: The vector data.\n        name (str, optional): The name of the vector layer. Defaults to \"Vector\".\n        kwargs: Keyword arguments to pass to the vector layer.\"\"\"\n    import geopandas as gpd\n    if data.endswith(\".shp\"):\n        self.add_shp(data, name=name, **kwargs)\n    if data.endswith(\".geojson\"):\n        self.add_geojson(data, name=name, **kwargs)\n    else:\n        gdf = gpd.read_file(data) \n        self.add_gdf(gdf, name=name, **kwargs)\n</code></pre>"},{"location":"maplab/#maplab.maplab.Map.add_wms_layer","title":"<code>add_wms_layer(self, url, name, layers, format='image/png', transparent=True, attribution='', **kwargs)</code>","text":"<p>Adds a WMS layer to the map.</p> <p>Parameters:</p> Name Type Description Default <code>url</code> <code>str</code> <p>The URL of the WMS service.</p> required <code>name</code> <code>str</code> <p>The name of the layer.</p> required <code>layers</code> <code>str</code> <p>The layers of the WMS service.</p> required <code>format</code> <code>str</code> <p>The format of the image. Defaults to 'image/png'.</p> <code>'image/png'</code> <code>transparent</code> <code>bool</code> <p>Whether the image is transparent. Defaults to True.</p> <code>True</code> <code>attribution</code> <code>str</code> <p>The attribution of the data. Defaults to ''.</p> <code>''</code> Source code in <code>maplab/maplab.py</code> <pre><code>def add_wms_layer(self, url, name, layers, format='image/png', transparent=True, attribution='', **kwargs):\n\"\"\"Adds a WMS layer to the map.\n    Args:\n        url (str): The URL of the WMS service.\n        name (str): The name of the layer.\n        layers (str): The layers of the WMS service.\n        format (str, optional): The format of the image. Defaults to 'image/png'.\n        transparent (bool, optional): Whether the image is transparent. Defaults to True.\n        attribution (str, optional): The attribution of the data. Defaults to ''.\n    \"\"\"\n    import ipyleaflet\n    import requests\n    from ipyleaflet import WMSLayer\n\n    wms = ipyleaflet.WMSLayer(\n        url=url,\n        layers=layers,\n        format=format,\n        transparent=transparent,\n        attribution=attribution,\n        name=name, **kwargs\n    )\n    self.add_layer(wms)\n</code></pre>"},{"location":"maplab/#maplab.maplab.Map.csv_to_geojson","title":"<code>csv_to_geojson(in_csv, out_geojson, x='longitude', y='latitude')</code>","text":"<p>Converts a csv file to a geojson file.</p> <p>Parameters:</p> Name Type Description Default <code>in_csv</code> <code>str</code> <p>The input csv file.</p> required <code>out_geojson</code> <code>str</code> <p>The output geojson file.</p> required <code>x</code> <code>str</code> <p>The name of the x column. Defaults to 'longitude'.</p> <code>'longitude'</code> <code>y</code> <code>str</code> <p>The name of the y column. Defaults to 'latitude'.</p> <code>'latitude'</code> Source code in <code>maplab/maplab.py</code> <pre><code>def csv_to_geojson(in_csv, out_geojson, x='longitude', y='latitude'):\n'''Converts a csv file to a geojson file.\n    Args:\n        in_csv (str): The input csv file.\n        out_geojson (str): The output geojson file.\n        x (str, optional): The name of the x column. Defaults to 'longitude'.\n        y (str, optional): The name of the y column. Defaults to 'latitude'.'''\n    import pandas as pd\n    import geopandas as gpd\n    from shapely.geometry import Point\n    df = pd.read_csv(in_csv)\n    gdf = gpd.GeoDataFrame(df, geometry=gpd.points_from_xy(df[x], df[y]))\n    gdf.to_file(out_geojson, driver='GeoJSON')\n    print(\"GeoJSON saved to \" + out_geojson)\n</code></pre>"},{"location":"maplab/#maplab.maplab.Map.csv_to_markercluster","title":"<code>csv_to_markercluster(self, in_csv, x='longitude', y='latitude')</code>","text":"<p>Converts a csv file to a marker cluster layer and adds it to the map.</p> <p>Parameters:</p> Name Type Description Default <code>in_csv</code> <code>str</code> <p>The input csv file.</p> required <code>x</code> <code>str</code> <p>The name of the x column. Defaults to 'longitude'.</p> <code>'longitude'</code> <code>y</code> <code>str</code> <p>The name of the y column. Defaults to 'latitude'.</p> <code>'latitude'</code> Source code in <code>maplab/maplab.py</code> <pre><code>def csv_to_markercluster(self, in_csv, x='longitude', y='latitude'):\n'''Converts a csv file to a marker cluster layer and adds it to the map.\n    Args:\n        in_csv (str): The input csv file.\n        x (str, optional): The name of the x column. Defaults to 'longitude'.\n        y (str, optional): The name of the y column. Defaults to 'latitude'.'''\n    import pandas as pd\n    import geopandas as gpd\n    from shapely.geometry import Point\n    from ipyleaflet import MarkerCluster\n    df = pd.read_csv(in_csv)\n    gdf = gpd.GeoDataFrame(df, geometry=gpd.points_from_xy(df[x], df[y]))\n    marker_cluster = MarkerCluster(markers=[ipyleaflet.Marker(location=[point.y, point.x]) for point in gdf['geometry'].tolist()])\n    self.add_layer(marker_cluster)\n    print(\"Marker cluster added to map\")\n</code></pre>"},{"location":"maplab/#maplab.maplab.Map.csv_to_shp","title":"<code>csv_to_shp(in_csv, out_shp, x='longitude', y='latitude')</code>","text":"<p>Converts a csv file to a shapefile.</p> <p>Parameters:</p> Name Type Description Default <code>in_csv</code> <code>str</code> <p>The input csv file.</p> required <code>out_shp</code> <code>str</code> <p>The output shapefile.</p> required <code>x</code> <code>str</code> <p>The name of the x column. Defaults to 'longitude'.</p> <code>'longitude'</code> <code>y</code> <code>str</code> <p>The name of the y column. Defaults to 'latitude'.</p> <code>'latitude'</code> Source code in <code>maplab/maplab.py</code> <pre><code>def csv_to_shp(in_csv, out_shp, x='longitude', y='latitude'):\n'''Converts a csv file to a shapefile.\n    Args:\n        in_csv (str): The input csv file.\n        out_shp (str): The output shapefile.\n        x (str, optional): The name of the x column. Defaults to 'longitude'.\n        y (str, optional): The name of the y column. Defaults to 'latitude'.'''\n    import pandas as pd\n    import geopandas as gpd\n    from shapely.geometry import Point\n    df = pd.read_csv(in_csv)\n    gdf = gpd.GeoDataFrame(df, geometry=gpd.points_from_xy(df[x], df[y]))\n    gdf.to_file(out_shp)\n    print(\"Shapefile saved to \" + out_shp)\n</code></pre>"},{"location":"maplab/#maplab.maplab.aggregate_by_county","title":"<code>aggregate_by_county(df, county_column, agg_column, agg_func)</code>","text":"<p>Aggregates the values of a column by county.</p> <p>Parameters:</p> Name Type Description Default <code>df</code> <code>pandas.DataFrame</code> <p>The dataframe to aggregate.</p> required <code>county_column</code> <code>str</code> <p>The name of the county column.</p> required <code>agg_column</code> <code>str</code> <p>The name of the column to aggregate.</p> required <code>agg_func</code> <code>str</code> <p>The aggregation function to use.</p> required <p>Returns:</p> Type Description <code>pandas.DataFrame</code> <p>The aggregated dataframe.</p> Source code in <code>maplab/maplab.py</code> <pre><code>def aggregate_by_county(df, county_column, agg_column, agg_func):\n\"\"\"Aggregates the values of a column by county.\n\n    Args:\n        df (pandas.DataFrame): The dataframe to aggregate.\n        county_column (str): The name of the county column.\n        agg_column (str): The name of the column to aggregate.\n        agg_func (str): The aggregation function to use.\n\n    Returns:\n        pandas.DataFrame: The aggregated dataframe.\n    \"\"\"\n    return df.groupby(county_column)[agg_column].agg(agg_func)\n</code></pre>"},{"location":"maplab/#maplab.maplab.columns_to_list","title":"<code>columns_to_list(df, columns)</code>","text":"<p>Converts the values of the given columns to a list.</p> <p>Parameters:</p> Name Type Description Default <code>df</code> <code>pandas.DataFrame</code> <p>The dataframe to convert.</p> required <code>columns</code> <code>list</code> <p>The columns to convert.</p> required <p>Returns:</p> Type Description <code>pandas.DataFrame</code> <p>The dataframe with the columns converted to lists.</p> Source code in <code>maplab/maplab.py</code> <pre><code>def columns_to_list(df, columns):\n\"\"\"Converts the values of the given columns to a list.\n\n    Args:\n        df (pandas.DataFrame): The dataframe to convert.\n        columns (list): The columns to convert.\n\n    Returns:\n        pandas.DataFrame: The dataframe with the columns converted to lists.\n    \"\"\"\n    for column in columns:\n        df[column] = df[column].str.split(\", \")\n    return df\n</code></pre>"},{"location":"maplab/#maplab.maplab.copy_columns_to_index","title":"<code>copy_columns_to_index(df, columns)</code>","text":"<p>Copies the values of the given columns to the index.</p> <p>Parameters:</p> Name Type Description Default <code>df</code> <code>pandas.DataFrame</code> <p>The dataframe to copy the columns from.</p> required <code>columns</code> <code>list</code> <p>The columns to copy to the index.</p> required <p>Returns:</p> Type Description <code>pandas.DataFrame</code> <p>The dataframe with the columns copied to the index.</p> Source code in <code>maplab/maplab.py</code> <pre><code>def copy_columns_to_index(df, columns):\n\"\"\"Copies the values of the given columns to the index.\n\n    Args:\n        df (pandas.DataFrame): The dataframe to copy the columns from.\n        columns (list): The columns to copy to the index.\n\n    Returns:\n        pandas.DataFrame: The dataframe with the columns copied to the index.\n    \"\"\"\n    for column in columns:\n        df[column] = df.index\n    return df\n</code></pre>"},{"location":"maplab/#maplab.maplab.edit_city_names","title":"<code>edit_city_names(df, phrase)</code>","text":"<p>Edits the dataframe values by entering a string to remove from the right side of the city name.</p> <p>Parameters:</p> Name Type Description Default <code>df</code> <code>pandas.DataFrame</code> <p>The dataframe to edit.</p> required <code>phrase</code> <code>str</code> <p>The string to remove from the right side of the county name.</p> required <p>Returns:</p> Type Description <code>pandas.DataFrame</code> <p>The dataframe with the city names edited.</p> Source code in <code>maplab/maplab.py</code> <pre><code>def edit_city_names(df, phrase):\n\"\"\"Edits the dataframe values by entering a string to remove from the right side of the city name.\n\n    Args:\n        df (pandas.DataFrame): The dataframe to edit.\n        phrase (str): The string to remove from the right side of the county name.\n\n    Returns:\n        pandas.DataFrame: The dataframe with the city names edited.\n    \"\"\"\n    df = df.str.replace(phrase, \"\")\n    return df\n</code></pre>"},{"location":"maplab/#maplab.maplab.excel_to_dataframe","title":"<code>excel_to_dataframe(excel_file, sheet_name, index_col=None)</code>","text":"<p>Converts an excel file to a dataframe.</p> <p>Parameters:</p> Name Type Description Default <code>excel_file</code> <code>str</code> <p>The excel file to convert.</p> required <code>sheet_name</code> <code>str</code> <p>The name of the sheet to convert.</p> required <code>index_col</code> <code>str</code> <p>The column to use as the index. Defaults to None.</p> <code>None</code> <p>Returns:</p> Type Description <code>pandas.DataFrame</code> <p>The dataframe.</p> Source code in <code>maplab/maplab.py</code> <pre><code>def excel_to_dataframe(excel_file, sheet_name, index_col=None):\n\"\"\"Converts an excel file to a dataframe.\n\n    Args:\n        excel_file (str): The excel file to convert.\n        sheet_name (str): The name of the sheet to convert.\n        index_col (str, optional): The column to use as the index. Defaults to None.\n\n    Returns:\n        pandas.DataFrame: The dataframe.\n    \"\"\"\n    return pandas.read_excel(excel_file, sheet_name=sheet_name, index_col=index_col)\n</code></pre>"},{"location":"maplab/#maplab.maplab.join_shapefile_to_dataframe","title":"<code>join_shapefile_to_dataframe(df, shapefile, index_column, join_column)</code>","text":"<p>Joins a shapefile to a dataframe.</p> <p>Parameters:</p> Name Type Description Default <code>df</code> <code>pandas.DataFrame</code> <p>The dataframe to join.</p> required <code>shapefile</code> <code>str</code> <p>The shapefile to join.</p> required <code>index_column</code> <code>str</code> <p>The column to use as the index.</p> required <code>join_column</code> <code>str</code> <p>The column to join on.</p> required <p>Returns:</p> Type Description <code>geopandas.GeoDataFrame</code> <p>The joined dataframe.</p> Source code in <code>maplab/maplab.py</code> <pre><code>def join_shapefile_to_dataframe(df, shapefile, index_column, join_column):\n\"\"\"Joins a shapefile to a dataframe.\n\n    Args:\n        df (pandas.DataFrame): The dataframe to join.\n        shapefile (str): The shapefile to join.\n        index_column (str): The column to use as the index.\n        join_column (str): The column to join on.\n\n    Returns:\n        geopandas.GeoDataFrame: The joined dataframe.\n    \"\"\"\n    gdf = geopandas.read_file(shapefile)\n    gdf = gdf.set_index(index_column)\n    gdf[join_column] = gdf.index\n    gdf = gdf.join(df, on=join_column)\n    return gdf\n</code></pre>"},{"location":"maplab/#maplab.maplab.random_string","title":"<code>random_string(length, upper=False, digits=False)</code>","text":"<p>Generates a random string of a given length.</p> <p>Parameters:</p> Name Type Description Default <code>length</code> <code>_type_</code> <p>The length of the string to generate.</p> required <code>upper</code> <code>bool</code> <p>Whether to include uppercase letters. Defaults to False.</p> <code>False</code> <code>digits</code> <code>bool</code> <p>Whether to include digits. Defaults to False.</p> <code>False</code> <p>Returns:</p> Type Description <code>str</code> <p>random string</p> Source code in <code>maplab/maplab.py</code> <pre><code>def random_string(length, upper=False, digits=False):\n\"\"\"Generates a random string of a given length.\n\n    Args:\n        length (_type_): The length of the string to generate.\n        upper (bool, optional): Whether to include uppercase letters. Defaults to False.\n        digits (bool, optional): Whether to include digits. Defaults to False.\n\n    Returns:\n        str: random string\n    \"\"\"    \n    letters = string.ascii_lowercase\n    if upper:\n        letters += string.ascii_uppercase\n    if digits:\n        letters += string.digits\n    return ''.join(random.choice(letters) for i in range(length))\n</code></pre>"},{"location":"usage/","title":"Usage","text":"<p>To use MapLab in a project:</p> <pre><code>import maplab\n</code></pre>"},{"location":"examples/add_markers/","title":"Add markers","text":"<p>Adding points from a CSV file to a map.</p> In\u00a0[1]: Copied! <pre>import maplab\n</pre> import maplab In\u00a0[2]: Copied! <pre>m = maplab.Map(center=(40, -100), zoom=4)\n</pre> m = maplab.Map(center=(40, -100), zoom=4) <p>CSV file to marker cluster:</p> In\u00a0[3]: Copied! <pre># Be sure to define the path to your csv file, and the title of the columns that contain the latitude and longitude data\nm.csv_to_markercluster('data/world_cities.csv')\nm\n</pre> # Be sure to define the path to your csv file, and the title of the columns that contain the latitude and longitude data m.csv_to_markercluster('data/world_cities.csv') m <pre>Marker cluster added to map\n</pre> Out[3]: <p>File path search in toolbar:</p> In\u00a0[4]: Copied! <pre>#Just use the toolbar function and click the folder icon to browse your files\nm.add_toolbar()\n</pre> #Just use the toolbar function and click the folder icon to browse your files m.add_toolbar() <pre>\n---------------------------------------------------------------------------\nModuleNotFoundError                       Traceback (most recent call last)\nCell In[4], line 2\n      1 #Just use the toolbar function and click the folder icon to browse your files\n----&gt; 2 m.add_toolbar()\n\nFile ~/.local/lib/python3.9/site-packages/maplab/maplab.py:380, in Map.add_toolbar(self, position)\n    377         basemap.observe(change_basemap, names='value')\n    379 ### Marker info\n--&gt; 380         import ipyfilechooser\n    382         marker = ipyfilechooser.FileChooser('/Users/')\n    384         marker_ctrl = ipyleaflet.WidgetControl(widget=marker, position='topright')\n\nModuleNotFoundError: No module named 'ipyfilechooser'</pre>"},{"location":"examples/adding_data_to_a_map/","title":"Adding data to a map","text":"<p>Adding different data types to a map:</p> In\u00a0[1]: Copied! <pre>#pip install maplab\n</pre> #pip install maplab In\u00a0[2]: Copied! <pre>import maplab\n</pre> import maplab <p>Shapefiles</p> In\u00a0[3]: Copied! <pre>m = maplab.Map(center=(30, -60), zoom=3)\nm.add_search_control()\nm.add_draw_control()\nm.add_layers_control()\nm.add_fullscreen_control()\nm.add_shp(data = \"data/tl_2022_us_aiannh.shp\")\nm\n</pre> m = maplab.Map(center=(30, -60), zoom=3) m.add_search_control() m.add_draw_control() m.add_layers_control() m.add_fullscreen_control() m.add_shp(data = \"data/tl_2022_us_aiannh.shp\") m <pre>\n---------------------------------------------------------------------------\nCPLE_OpenFailedError                      Traceback (most recent call last)\nFile fiona/ogrext.pyx:136, in fiona.ogrext.gdal_open_vector()\n\nFile fiona/_err.pyx:291, in fiona._err.exc_wrap_pointer()\n\nCPLE_OpenFailedError: Unable to open data/tl_2022_us_aiannh.shx or data/tl_2022_us_aiannh.SHX. Set SHAPE_RESTORE_SHX config option to YES to restore or create it.\n\nDuring handling of the above exception, another exception occurred:\n\nDriverError                               Traceback (most recent call last)\nCell In[3], line 6\n      4 m.add_layers_control()\n      5 m.add_fullscreen_control()\n----&gt; 6 m.add_shp(data = \"data/tl_2022_us_aiannh.shp\")\n      7 m\n\nFile ~/.local/lib/python3.9/site-packages/maplab/maplab.py:210, in Map.add_shp(self, data, name, **kwargs)\n    197 \"\"\"Adds a shapefile to the map.\n    198 \n    199 Args:\n   (...)\n    206     gdf.__geo_interface__: The shapefile layer.\n    207 \"\"\"\n    208 import geopandas as gpd\n--&gt; 210 gdf = gpd.read_file(data)\n    211 geojson = gdf.__geo_interface__\n    212 self.add_geojson(geojson, name=name, **kwargs)\n\nFile ~/.local/lib/python3.9/site-packages/geopandas/io/file.py:248, in _read_file(filename, bbox, mask, rows, engine, **kwargs)\n    245     else:\n    246         path_or_bytes = filename\n--&gt; 248     return _read_file_fiona(\n    249 path_or_bytes, from_bytes, bbox=bbox, mask=mask, rows=rows, **kwargs\n    250 )\n    252 else:\n    253     raise ValueError(f\"unknown engine '{engine}'\")\n\nFile ~/.local/lib/python3.9/site-packages/geopandas/io/file.py:289, in _read_file_fiona(path_or_bytes, from_bytes, bbox, mask, rows, where, **kwargs)\n    286     reader = fiona.open\n    288 with fiona_env():\n--&gt; 289     with reader(path_or_bytes, **kwargs) as features:\n    290         crs = features.crs_wkt\n    291         # attempt to get EPSG code\n\nFile ~/.local/lib/python3.9/site-packages/fiona/env.py:457, in ensure_env_with_credentials.&lt;locals&gt;.wrapper(*args, **kwds)\n    454     session = DummySession()\n    456 with env_ctor(session=session):\n--&gt; 457     return f(*args, **kwds)\n\nFile ~/.local/lib/python3.9/site-packages/fiona/__init__.py:336, in open(fp, mode, driver, schema, crs, encoding, layer, vfs, enabled_drivers, crs_wkt, allow_unsupported_drivers, **kwargs)\n    333     path = parse_path(fp)\n    335 if mode in (\"a\", \"r\"):\n--&gt; 336     colxn = Collection(\n    337 path,\n    338 mode,\n    339 driver=driver,\n    340 encoding=encoding,\n    341 layer=layer,\n    342 enabled_drivers=enabled_drivers,\n    343 allow_unsupported_drivers=allow_unsupported_drivers,\n    344 **kwargs\n    345 )\n    346 elif mode == \"w\":\n    347     colxn = Collection(\n    348         path,\n    349         mode,\n   (...)\n    358         **kwargs\n    359     )\n\nFile ~/.local/lib/python3.9/site-packages/fiona/collection.py:243, in Collection.__init__(self, path, mode, driver, schema, crs, encoding, layer, vsi, archive, enabled_drivers, crs_wkt, ignore_fields, ignore_geometry, include_fields, wkt_version, allow_unsupported_drivers, **kwargs)\n    241 if self.mode == \"r\":\n    242     self.session = Session()\n--&gt; 243     self.session.start(self, **kwargs)\n    244 elif self.mode in (\"a\", \"w\"):\n    245     self.session = WritingSession()\n\nFile fiona/ogrext.pyx:588, in fiona.ogrext.Session.start()\n\nFile fiona/ogrext.pyx:143, in fiona.ogrext.gdal_open_vector()\n\nDriverError: Unable to open data/tl_2022_us_aiannh.shx or data/tl_2022_us_aiannh.SHX. Set SHAPE_RESTORE_SHX config option to YES to restore or create it.</pre> <p>Basemaps</p> In\u00a0[4]: Copied! <pre>m = maplab.Map(center=(30, -60), zoom=3)\nm\n</pre> m = maplab.Map(center=(30, -60), zoom=3) m Out[4]: In\u00a0[5]: Copied! <pre>m.add_basemap(basemap='terrain')\n</pre> m.add_basemap(basemap='terrain') <p>GeoJSON</p> In\u00a0[6]: Copied! <pre>m.add_geojson(data = \"\")\n</pre> m.add_geojson(data = \"\") <pre>\n---------------------------------------------------------------------------\nFileNotFoundError                         Traceback (most recent call last)\nCell In[6], line 1\n----&gt; 1 m.add_geojson(data = \"\")\n\nFile ~/.local/lib/python3.9/site-packages/maplab/maplab.py:190, in Map.add_geojson(self, data, **kwargs)\n    187 import json\n    189 if isinstance(data, str):\n--&gt; 190     with open(data, \"r\") as f:\n    191         data = json.load(f)\n    193 geojson = ipyleaflet.GeoJSON(data=data, **kwargs)\n\nFileNotFoundError: [Errno 2] No such file or directory: ''</pre> <p>Any Vector Data</p> In\u00a0[7]: Copied! <pre>m.add_vector('data/tl_2022_us_aiannh.shp')\n</pre> m.add_vector('data/tl_2022_us_aiannh.shp') <pre>\n---------------------------------------------------------------------------\nCPLE_OpenFailedError                      Traceback (most recent call last)\nFile fiona/ogrext.pyx:136, in fiona.ogrext.gdal_open_vector()\n\nFile fiona/_err.pyx:291, in fiona._err.exc_wrap_pointer()\n\nCPLE_OpenFailedError: Unable to open data/tl_2022_us_aiannh.shx or data/tl_2022_us_aiannh.SHX. Set SHAPE_RESTORE_SHX config option to YES to restore or create it.\n\nDuring handling of the above exception, another exception occurred:\n\nDriverError                               Traceback (most recent call last)\nCell In[7], line 1\n----&gt; 1 m.add_vector('data/tl_2022_us_aiannh.shp')\n\nFile ~/.local/lib/python3.9/site-packages/maplab/maplab.py:238, in Map.add_vector(self, data, name, **kwargs)\n    236 import geopandas as gpd\n    237 if data.endswith(\".shp\"):\n--&gt; 238     self.add_shp(data, name=name, **kwargs)\n    239 if data.endswith(\".geojson\"):\n    240     self.add_geojson(data, name=name, **kwargs)\n\nFile ~/.local/lib/python3.9/site-packages/maplab/maplab.py:210, in Map.add_shp(self, data, name, **kwargs)\n    197 \"\"\"Adds a shapefile to the map.\n    198 \n    199 Args:\n   (...)\n    206     gdf.__geo_interface__: The shapefile layer.\n    207 \"\"\"\n    208 import geopandas as gpd\n--&gt; 210 gdf = gpd.read_file(data)\n    211 geojson = gdf.__geo_interface__\n    212 self.add_geojson(geojson, name=name, **kwargs)\n\nFile ~/.local/lib/python3.9/site-packages/geopandas/io/file.py:248, in _read_file(filename, bbox, mask, rows, engine, **kwargs)\n    245     else:\n    246         path_or_bytes = filename\n--&gt; 248     return _read_file_fiona(\n    249 path_or_bytes, from_bytes, bbox=bbox, mask=mask, rows=rows, **kwargs\n    250 )\n    252 else:\n    253     raise ValueError(f\"unknown engine '{engine}'\")\n\nFile ~/.local/lib/python3.9/site-packages/geopandas/io/file.py:289, in _read_file_fiona(path_or_bytes, from_bytes, bbox, mask, rows, where, **kwargs)\n    286     reader = fiona.open\n    288 with fiona_env():\n--&gt; 289     with reader(path_or_bytes, **kwargs) as features:\n    290         crs = features.crs_wkt\n    291         # attempt to get EPSG code\n\nFile ~/.local/lib/python3.9/site-packages/fiona/env.py:457, in ensure_env_with_credentials.&lt;locals&gt;.wrapper(*args, **kwds)\n    454     session = DummySession()\n    456 with env_ctor(session=session):\n--&gt; 457     return f(*args, **kwds)\n\nFile ~/.local/lib/python3.9/site-packages/fiona/__init__.py:336, in open(fp, mode, driver, schema, crs, encoding, layer, vfs, enabled_drivers, crs_wkt, allow_unsupported_drivers, **kwargs)\n    333     path = parse_path(fp)\n    335 if mode in (\"a\", \"r\"):\n--&gt; 336     colxn = Collection(\n    337 path,\n    338 mode,\n    339 driver=driver,\n    340 encoding=encoding,\n    341 layer=layer,\n    342 enabled_drivers=enabled_drivers,\n    343 allow_unsupported_drivers=allow_unsupported_drivers,\n    344 **kwargs\n    345 )\n    346 elif mode == \"w\":\n    347     colxn = Collection(\n    348         path,\n    349         mode,\n   (...)\n    358         **kwargs\n    359     )\n\nFile ~/.local/lib/python3.9/site-packages/fiona/collection.py:243, in Collection.__init__(self, path, mode, driver, schema, crs, encoding, layer, vsi, archive, enabled_drivers, crs_wkt, ignore_fields, ignore_geometry, include_fields, wkt_version, allow_unsupported_drivers, **kwargs)\n    241 if self.mode == \"r\":\n    242     self.session = Session()\n--&gt; 243     self.session.start(self, **kwargs)\n    244 elif self.mode in (\"a\", \"w\"):\n    245     self.session = WritingSession()\n\nFile fiona/ogrext.pyx:588, in fiona.ogrext.Session.start()\n\nFile fiona/ogrext.pyx:143, in fiona.ogrext.gdal_open_vector()\n\nDriverError: Unable to open data/tl_2022_us_aiannh.shx or data/tl_2022_us_aiannh.SHX. Set SHAPE_RESTORE_SHX config option to YES to restore or create it.</pre> <p>Raster Data</p> In\u00a0[8]: Copied! <pre>m = maplab.Map(zoom=1, center=(-20.2, 57.5))\n\nurl = 'https://opendata.digitalglobe.com/events/mauritius-oil-spill/post-event/2020-08-12/105001001F1B5B00/105001001F1B5B00.tif'\nm.add_raster(url, name='Oil Spill')\nm\n</pre> m = maplab.Map(zoom=1, center=(-20.2, 57.5))  url = 'https://opendata.digitalglobe.com/events/mauritius-oil-spill/post-event/2020-08-12/105001001F1B5B00/105001001F1B5B00.tif' m.add_raster(url, name='Oil Spill') m Out[8]:"},{"location":"examples/foliumap/","title":"Foliumap","text":"<p>Using maplab with folium:</p> In\u00a0[1]: Copied! <pre>#pip install maplab\n</pre> #pip install maplab In\u00a0[2]: Copied! <pre>import maplab.foliumap as maplab\n</pre> import maplab.foliumap as maplab In\u00a0[3]: Copied! <pre>m = maplab.Map(center=[20,0], zoom=2)\nm.add_tile_layer(url='http://mt0.google.com/vt/lyrs=m&amp;hl=en&amp;x={x}&amp;y={y}&amp;z={z}', name='Google Maps', attribution='Google')\nm\n</pre> m = maplab.Map(center=[20,0], zoom=2) m.add_tile_layer(url='http://mt0.google.com/vt/lyrs=m&amp;hl=en&amp;x={x}&amp;y={y}&amp;z={z}', name='Google Maps', attribution='Google') m Out[3]: Make this Notebook Trusted to load map: File -&gt; Trust Notebook"},{"location":"examples/ipyleaflet/","title":"Ipyleaflet","text":"<p>Using ipyleaflet to display a map and add a basemap layer:</p> In\u00a0[1]: Copied! <pre>#pip install ipyleaflet\n</pre> #pip install ipyleaflet In\u00a0[2]: Copied! <pre>import ipyleaflet\n</pre> import ipyleaflet In\u00a0[3]: Copied! <pre>from ipyleaflet import Map, basemaps, basemap_to_tiles\n\nm = Map(\n    basemap=basemap_to_tiles(basemaps.OpenTopoMap),\n    center=(55,55),\n    zoom=4\n)\n\nm\n</pre> from ipyleaflet import Map, basemaps, basemap_to_tiles  m = Map(     basemap=basemap_to_tiles(basemaps.OpenTopoMap),     center=(55,55),     zoom=4 )  m Out[3]: In\u00a0[4]: Copied! <pre>import leafmap\n</pre> import leafmap <pre>\n---------------------------------------------------------------------------\nModuleNotFoundError                       Traceback (most recent call last)\nCell In[4], line 1\n----&gt; 1 import leafmap\n\nModuleNotFoundError: No module named 'leafmap'</pre> In\u00a0[5]: Copied! <pre>m = leafmap.Map()\nm.add_basemap(\"HYBRID\")\nm\n</pre> m = leafmap.Map() m.add_basemap(\"HYBRID\") m <pre>\n---------------------------------------------------------------------------\nNameError                                 Traceback (most recent call last)\nCell In[5], line 1\n----&gt; 1 m = leafmap.Map()\n      2 m.add_basemap(\"HYBRID\")\n      3 m\n\nNameError: name 'leafmap' is not defined</pre> In\u00a0[6]: Copied! <pre>m.clear_layers()\n</pre> m.clear_layers()"},{"location":"examples/maplab/","title":"Maplab","text":"<p>Map controls:</p> In\u00a0[1]: Copied! <pre>#!pip install maplab \n#!pip install -U ipyleaflet==0.13.3\n</pre> #!pip install maplab  #!pip install -U ipyleaflet==0.13.3 In\u00a0[2]: Copied! <pre>import maplab\n</pre> import maplab In\u00a0[3]: Copied! <pre>m = maplab.Map(center=(40, -100), zoom=4)\nm.add_search_control(position='topright')\nm.add_draw_control()\nm.add_layers_control\nm.add_fullscreen_control()\nm.add_tile_layer(url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\", name=\"OpenStreetMap\")\nm\n</pre> m = maplab.Map(center=(40, -100), zoom=4) m.add_search_control(position='topright') m.add_draw_control() m.add_layers_control m.add_fullscreen_control() m.add_tile_layer(url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\", name=\"OpenStreetMap\") m Out[3]: <p>Add NLCD Layer to the map:</p> In\u00a0[4]: Copied! <pre>m.add_landcover(NLCD='2019 land cover')\n</pre> m.add_landcover(NLCD='2019 land cover') <p>Adding a swipe map:</p> In\u00a0[5]: Copied! <pre>layer1_url = \"https://stamen-tiles-{s}.a.ssl.fastly.net/toner/{z}/{x}/{y}{r}.png\"\nlayer2_url = \"https://stamen-tiles-{s}.a.ssl.fastly.net/terrain/{z}/{x}/{y}{r}.png\"\n</pre> layer1_url = \"https://stamen-tiles-{s}.a.ssl.fastly.net/toner/{z}/{x}/{y}{r}.png\" layer2_url = \"https://stamen-tiles-{s}.a.ssl.fastly.net/terrain/{z}/{x}/{y}{r}.png\"  In\u00a0[6]: Copied! <pre>m = maplab.Map(center=(51.505, -0.09), zoom=13)\nm.add_swipe_control(layer1_url=layer1_url, layer2_url=layer2_url,swipe_position='topright')\nm\n</pre> m = maplab.Map(center=(51.505, -0.09), zoom=13) m.add_swipe_control(layer1_url=layer1_url, layer2_url=layer2_url,swipe_position='topright') m <pre>Swipe tool added to map\n</pre> Out[6]: <p>Automation of the City Socioeconomic Database for Tennessee:</p> In\u00a0[7]: Copied! <pre>import pandas\n</pre> import pandas In\u00a0[8]: Copied! <pre>import openpyxl\n</pre> import openpyxl In\u00a0[9]: Copied! <pre>maplab.excel_to_dataframe(excel_file=\"data/CityNames.xlsx\", sheet_name=\"Sheet1\")\n</pre> maplab.excel_to_dataframe(excel_file=\"data/CityNames.xlsx\", sheet_name=\"Sheet1\") Out[9]: City 0 Adams 1 Adamsville 2 Alamo 3 Alcoa 4 Alexandria ... ... 426 Winfield 427 Woodbury 428 Woodland Mills 429 Wrigley CDP 430 Yorkville <p>431 rows \u00d7 1 columns</p>"},{"location":"examples/widgets/","title":"Widgets","text":"<p>Add a toolbox widget to the map that allows you to select a basemap from a dropdown menu:</p> In\u00a0[1]: Copied! <pre>#pip install maplab\n</pre> #pip install maplab In\u00a0[2]: Copied! <pre>import maplab\n</pre> import maplab In\u00a0[3]: Copied! <pre>m = maplab.Map()\nm\n</pre> m = maplab.Map() m Out[3]: In\u00a0[4]: Copied! <pre>m.add_toolbar()\n</pre> m.add_toolbar() <pre>\n---------------------------------------------------------------------------\nModuleNotFoundError                       Traceback (most recent call last)\nCell In[4], line 1\n----&gt; 1 m.add_toolbar()\n\nFile ~/.local/lib/python3.9/site-packages/maplab/maplab.py:380, in Map.add_toolbar(self, position)\n    377         basemap.observe(change_basemap, names='value')\n    379 ### Marker info\n--&gt; 380         import ipyfilechooser\n    382         marker = ipyfilechooser.FileChooser('/Users/')\n    384         marker_ctrl = ipyleaflet.WidgetControl(widget=marker, position='topright')\n\nModuleNotFoundError: No module named 'ipyfilechooser'</pre> <p>Adding an image or logo to the map:</p> In\u00a0[5]: Copied! <pre>from maplab import Map\nimport ipywidgets as w\nfrom ipyleaflet import WidgetControl\n\nm = Map()\nm.add_basemap('CartoDB.Positron')\n\npath = 'data/utk.png'\nm.add_image(path)\n\nm\n</pre> from maplab import Map import ipywidgets as w from ipyleaflet import WidgetControl  m = Map() m.add_basemap('CartoDB.Positron')  path = 'data/utk.png' m.add_image(path)  m Out[5]:"}]}